name: DesignPatterns iOS CI/CD

on:
  push:
    branches: [main]

env:
  SIM_DEVICE: "iPhone 16 Pro"
  SIM_OS: "18.5"
  DEST: "platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5,arch=arm64"

jobs:
  build-test:
    runs-on: macos-15
    permissions:
      contents: write
    timeout-minutes: 180

    steps:
    - uses: actions/checkout@v4

    - name: Select Xcode 16.4
      run: sudo xcode-select -s /Applications/Xcode_16.4.app

    - name: Cache Swift Packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.swiftpm
          ~/Library/Developer/Xcode/DerivedData/WorkspaceArtifacts/*
          ~/Library/Developer/Xcode/DerivedData/ModuleCache
        key: macOS-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: macOS-spm-

    - name: Build for testing
      run: |
        xcodebuild build-for-testing \
          -project DesignPatterns/DesignPatterns.xcodeproj \
          -scheme DesignPatterns \
          -destination "$DEST" \
          -enableCodeCoverage YES

    - name: Run Unit Tests
      run: |
        xcodebuild test-without-building \
          -project DesignPatterns/DesignPatterns.xcodeproj \
          -scheme DesignPatterns \
          -destination "$DEST" \
          -only-testing:DesignPatternsTests \
          -parallel-testing-enabled YES \
          -maximum-concurrent-test-simulator-destinations 2 \
          -enableCodeCoverage YES

    - name: Run Snapshot Tests
      run: |
        xcodebuild test-without-building \
          -project DesignPatterns/DesignPatterns.xcodeproj \
          -scheme DesignPatterns \
          -destination "$DEST" \
          -only-testing:DesignPatternsSnapshotTests \
          -parallel-testing-enabled NO \
          -maximum-concurrent-test-simulator-destinations 1 \
          -enableCodeCoverage YES

    - name: Run UI Tests
      run: |
        xcodebuild test-without-building \
          -project DesignPatterns/DesignPatterns.xcodeproj \
          -scheme DesignPatterns \
          -destination "$DEST" \
          -only-testing:DesignPatternsUITests \
          -parallel-testing-enabled NO \
          -maximum-concurrent-test-simulator-destinations 1 \
          -enableCodeCoverage YES

    - name: Extract coverage %
      id: cov
      run: |
        cd DesignPatterns

        read -r OBJROOT BUILD_DIR <<<$(xcodebuild \
          -project DesignPatterns.xcodeproj \
          -scheme  DesignPatterns \
          -showBuildSettings |
          awk '/OBJROOT/ {o=$3} /CONFIGURATION_BUILD_DIR/ {b=$3} END{print o,b}')

        if [[ -z "$OBJROOT" || -z "$BUILD_DIR" ]]; then
          echo "::error::Не удалось определить OBJROOT/BUILD_DIR"
          exit 1
        fi

        PROFDATA=$(find "$OBJROOT" -type f -name '*.profdata' | head -1)
        APP="$BUILD_DIR/DesignPatterns.app"

        if [[ ! -f "$PROFDATA" || ! -d "$APP" ]]; then
          echo "::error::Coverage artifacts not found"
          echo "PROFDATA = $PROFDATA"
          echo "APP      = $APP"
          exit 1
        fi

        PCT=$(xcrun llvm-cov export -summary-only -instr-profile "$PROFDATA" "$APP" \
                | awk '/line.*percent:/ {printf "%.1f",$3*100}')

        if [[ -z "$PCT" ]]; then
          echo "::warning::Coverage percent empty, fallback to 0.0"
          PCT="0.0"
        fi

        echo "percent=$PCT" >>"$GITHUB_OUTPUT"

    - name: Save badge json
      run: |
        mkdir -p docs
        PCT="${{ steps.cov.outputs.percent }}"

        PCT=$(echo "$PCT" | tr -d '[:space:]')

        if awk "BEGIN {exit !($PCT >= 90)}"; then
          COLOR="brightgreen"
        elif awk "BEGIN {exit !($PCT >= 80)}"; then
          COLOR="green"
        elif awk "BEGIN {exit !($PCT >= 70)}"; then
          COLOR="yellowgreen"
        elif awk "BEGIN {exit !($PCT >= 60)}"; then
          COLOR="yellow"
        elif awk "BEGIN {exit !($PCT >= 50)}"; then
          COLOR="orange"
        else
          COLOR="red"
        fi

        cat > docs/coverage.json <<EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${PCT}%",
          "color": "${COLOR}"
        }
        EOF

        echo "Generated docs/coverage.json:"
        cat docs/coverage.json

    - name: Commit coverage badge
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ci: coverage badge updated [skip ci]"
        file_pattern: docs/coverage.json

    - name: Shutdown simulators
      run: xcrun simctl shutdown all || true

    - name: Install fastlane
      run: brew install fastlane

    - name: Take screenshots
      env:
        FASTLANE_SKIP_UPDATE_CHECK: true
      run: |
        fastlane snapshot --verbose \
          --scheme FastlaneSnapshots \
          --devices "$SIM_DEVICE"

    - name: Commit updated screenshots
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ci: snapshots updated [skip ci]"
        file_pattern: docs/screenshots/*
