name: DesignPatterns iOS CI/CD

on:
  push:
    branches: [main]

env:
  SIM_DEVICE: "iPhone 16 Pro"
  SIM_OS: "18.5"
  DEST: "platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5,arch=arm64"

jobs:
  build-test:
    runs-on: macos-15
    permissions:
      contents: write
    timeout-minutes: 180
    env:
      DERIVED_DATA: ${{ github.workspace }}/.derived

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode_16.4.app

      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Developer/Xcode/DerivedData/WorkspaceArtifacts/*
            ~/Library/Developer/Xcode/DerivedData/ModuleCache
          key: macOS-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: macOS-spm-

      - name: Build for testing
        run: |
          xcodebuild build-for-testing \
            -project DesignPatterns/DesignPatterns.xcodeproj \
            -scheme DesignPatterns \
            -destination "$DEST" \
            -derivedDataPath "$DERIVED_DATA" \
            -enableCodeCoverage YES

      - name: Run Unit Tests
        run: |
          xcodebuild test-without-building \
            -project DesignPatterns/DesignPatterns.xcodeproj \
            -scheme DesignPatterns \
            -destination "$DEST" \
            -only-testing:DesignPatternsTests \
            -parallel-testing-enabled YES \
            -maximum-concurrent-test-simulator-destinations 2 \
            -derivedDataPath "$DERIVED_DATA" \
            -enableCodeCoverage YES \
            -resultBundlePath "$DERIVED_DATA/Results/Unit.xcresult"

      - name: Run Snapshot Tests
        run: |
          xcodebuild test-without-building \
            -project DesignPatterns/DesignPatterns.xcodeproj \
            -scheme DesignPatterns \
            -destination "$DEST" \
            -only-testing:DesignPatternsSnapshotTests \
            -parallel-testing-enabled NO \
            -maximum-concurrent-test-simulator-destinations 1 \
            -derivedDataPath "$DERIVED_DATA" \
            -enableCodeCoverage YES \
            -resultBundlePath "$DERIVED_DATA/Results/Snapshot.xcresult"

      - name: Run UI Tests
        run: |
          xcodebuild test-without-building \
            -project DesignPatterns/DesignPatterns.xcodeproj \
            -scheme DesignPatterns \
            -destination "$DEST" \
            -only-testing:DesignPatternsUITests \
            -parallel-testing-enabled NO \
            -maximum-concurrent-test-simulator-destinations 1 \
            -derivedDataPath "$DERIVED_DATA" \
            -enableCodeCoverage YES \
            -resultBundlePath "$DERIVED_DATA/Results/UI.xcresult"

      - name: Extract coverage and build badge
        id: cov
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p coverage/json

          bundles=$(find "$DERIVED_DATA" -type d -name "*.xcresult" 2>/dev/null || true)
          if [ -z "$bundles" ]; then
            echo "no .xcresult found under $DERIVED_DATA" >&2
            find "$DERIVED_DATA" -type d -maxdepth 4 -print || true
            exit 1
          fi

          for B in $bundles; do
            base=$(basename "$B")
            xcrun xccov view --report --json "$B" > "coverage/json/${base}.json"
          done

          files=$(ls coverage/json/*.json 2>/dev/null || true)
          if [ -z "$files" ]; then
            echo "no coverage json files produced" >&2
            exit 1
          fi

          COV=$(jq -s '
            [.[].targets[]? | select(.lineCoverage != null)]
            | if length == 0 then 0
              else (map(.lineCoverage) | add / length * 100)
              end
          ' $files)

          printf "%.2f\n" "$COV" > coverage.txt
          echo "coverage=$COV" >> "$GITHUB_OUTPUT"

          P=$(printf "%.0f" "$COV")
          case $P in
            [0-5][0-9]) COLOR=red ;;
            6[0-9]|7[0-9]) COLOR=yellow ;;
            *) COLOR=brightgreen ;;
          esac

          curl -s "https://img.shields.io/badge/coverage-${P}%25-${COLOR}.svg" > coverage-badge.svg

      - name: Commit coverage badge
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: update coverage badge [skip ci]"
          file_pattern: coverage-badge.svg coverage.txt
